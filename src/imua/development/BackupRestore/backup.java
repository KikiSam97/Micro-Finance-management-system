/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imua.development.BackupRestore;

import imua.development.Methods;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.record.crypto.Biff8EncryptionKey;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author kimani kogi
 */
public class backup extends javax.swing.JFrame {
  JFileChooser chooser;
   String choosertitle;

String filePath;
String tt;
    /**
     * Creates new form backup
     */
    public backup() {
        initComponents();
        setTilteImage();
    }
private void setTilteImage(){
        try {
            Methods n=new Methods();
            String t= n.setTitle();
            this.setTitle(t);
            String i=n.setIconImage();
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(i)));
            
            String col=n.selectcolor();
            Color c=new Color(Integer.parseInt(col));
            jPanel1.setBackground(c);
        } catch (Exception ex) {
            Logger.getLogger(backup.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBoxTransactions = new javax.swing.JCheckBox();
        jCheckBoxLoans = new javax.swing.JCheckBox();
        jCheckBoxOrgAccount = new javax.swing.JCheckBox();
        jCheckBoxCustomers = new javax.swing.JCheckBox();
        jCheckBoxLoanTypes = new javax.swing.JCheckBox();
        jCheckBoxuseracctypes = new javax.swing.JCheckBox();
        jCheckBoxusergroups = new javax.swing.JCheckBox();
        jCheckBoxLoansArchives = new javax.swing.JCheckBox();
        jCheckBoxApplications = new javax.swing.JCheckBox();
        jCheckBoxGuranters = new javax.swing.JCheckBox();
        jCheckBoxPrefrences = new javax.swing.JCheckBox();
        jComboBoxChoose = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup"));

        jButton1.setText("Backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxTransactions.setText("Transactions");

        jCheckBoxLoans.setText("Loans");

        jCheckBoxOrgAccount.setText("Org'S Account");

        jCheckBoxCustomers.setText("Customers");

        jCheckBoxLoanTypes.setText("Loan Types");

        jCheckBoxuseracctypes.setText("Accounts Types");

        jCheckBoxusergroups.setText("Groups");

        jCheckBoxLoansArchives.setText("Loans Archives");

        jCheckBoxApplications.setText("Applications");

        jCheckBoxGuranters.setText("Guranters");

        jCheckBoxPrefrences.setText("Prefrences");

        jComboBoxChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XLS", "SQL" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxChoose, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckBoxTransactions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxLoans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxOrgAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxLoanTypes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxuseracctypes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxusergroups)
                            .addComponent(jCheckBoxLoansArchives)
                            .addComponent(jCheckBoxApplications)
                            .addComponent(jCheckBoxGuranters)
                            .addComponent(jCheckBoxPrefrences))
                        .addGap(83, 83, 83))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(246, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxTransactions)
                            .addComponent(jCheckBoxusergroups)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jComboBoxChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxLoans)
                    .addComponent(jCheckBoxLoansArchives))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxOrgAccount)
                    .addComponent(jCheckBoxApplications))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCustomers)
                    .addComponent(jCheckBoxGuranters))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxLoanTypes)
                    .addComponent(jCheckBoxPrefrences))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxuseracctypes)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int result;
        
    chooser = new JFileChooser(); 
    chooser.setCurrentDirectory(new java.io.File("."));
    chooser.setDialogTitle(choosertitle);
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    //
    // disable the "All files" option.
    //
    chooser.setAcceptAllFileFilterUsed(false);
    //    
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
      System.out.println("getCurrentDirectory(): " 
         +  chooser.getCurrentDirectory());
      System.out.println("getSelectedFile() : " 
         +  chooser.getSelectedFile());
      chooser.getSelectedFile();
      }
    else {
      System.out.println("No Selection ");
      }
    if(jComboBoxChoose.getSelectedItem().toString().equals("xls")){
        work();
    }
    else{
       sqlDump(); 
    }


    }//GEN-LAST:event_jButton1ActionPerformed
private void sqlDump(){
    
      try {
          String path ="C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysqldump";
//C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqldump
String command= "cmd.exe /c "
        + "\"\""+path+"\"  "
        + " --user="+getDbUserName()
        + " --password="+getDbPassword()
        + " --host="+getDbConnectionIP()
        + " --protocol=tcp "
        + " --port="+getDbConnectionPort()
        + " --default-character-set=utf8 "
        + " --single-transaction=TRUE "
        + " --routines "
        + " --events "
        + "\""+getDbName()
        +"\" "
        + ">"
        + " \""
        + chooser.getSelectedFile()+"\\DATABACKUP.sql"
        + "\""
        + " \"";
Runtime r= Runtime.getRuntime();
r.exec(command);


jCheckBoxLoans.setSelected(true);
jCheckBoxLoans.setSelected(true);
jCheckBoxOrgAccount.setSelected(true);
jCheckBoxLoanTypes.setSelected(true);
jCheckBoxGuranters.setSelected(true);
jCheckBoxuseracctypes.setSelected(true);
jCheckBoxusergroups.setSelected(true);
jCheckBoxLoansArchives.setSelected(true);
jCheckBoxPrefrences.setSelected(true);
jCheckBoxApplications.setSelected(true);
jCheckBoxTransactions.setSelected(true);
jCheckBoxLoans.setSelected(true);
JOptionPane.showMessageDialog(null, "DONE", "MESSAGE",JOptionPane.PLAIN_MESSAGE);
//Runtime runtime = Runtime.getRuntime(command);
      } catch (IOException ex) {
          JOptionPane.showMessageDialog(null, "ERROR  :NOT SUCCESSFUL","ERROR",JOptionPane.ERROR_MESSAGE);
          Logger.getLogger(backup.class.getName()).log(Level.SEVERE, null, ex);
      }
    
    
    
    
    
}
    
    
    
    
    
    
    
    private void work(){
jCheckBoxLoans.setSelected(false);
jCheckBoxLoans.setSelected(false);
jCheckBoxOrgAccount.setSelected(false);
jCheckBoxLoanTypes.setSelected(false);
jCheckBoxGuranters.setSelected(false);
jCheckBoxuseracctypes.setSelected(false);
jCheckBoxusergroups.setSelected(false);
jCheckBoxLoansArchives.setSelected(false);
jCheckBoxPrefrences.setSelected(false);
jCheckBoxApplications.setSelected(false);
jCheckBoxTransactions.setSelected(false);
jCheckBoxLoans.setSelected(false);
if(transactions().equals("Succesful")){
    jCheckBoxTransactions.setSelected(true);
}
if(Applications().equals("Succesful")){
     jCheckBoxApplications.setSelected(true);
}
if(Prefrences().equals("Succesful")){
     jCheckBoxPrefrences.setSelected(true);
}
if(Archiveloans().equals("Succesful")){
     jCheckBoxLoansArchives.setSelected(true);
}
if(usergroups().equals("Succesful")){
     jCheckBoxusergroups.setSelected(true);
}
if(useracctypes().equals("Succesful")){
    jCheckBoxuseracctypes.setSelected(true);
}
if(guranters().equals("Succesful")){
    jCheckBoxGuranters.setSelected(true);
}
if(LoanTypes().equals("Succesful")){
    jCheckBoxLoanTypes.setSelected(true);
}
if(orgAccount().equals("Succesful")){
    jCheckBoxOrgAccount.setSelected(true);
}
if(customers().equals("Succesful")){
    jCheckBoxLoans.setSelected(true);
}
if(loans().equals("Succesful")){
     jCheckBoxLoans.setSelected(true);
}
JOptionPane.showMessageDialog(null, "DONE", "MESSAGE",JOptionPane.PLAIN_MESSAGE);
}
    
    
    public String transactions(){
    String succ="Transactions Backup Error";
    BufferedInputStream bufferInput=null;
    POIFSFileSystem poiFileSystem=null;
    
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Transactions.xls");
//poiFileSystem=new 
//Biff8EncryptionKey.setCurrentUserPassword("123ERYcog.");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
row1.createCell(0).setCellValue("ID");
row1.createCell(1).setCellValue("AMOUNT");
row1.createCell(2).setCellValue("TYPEOFTRANSACTION");
row1.createCell(3).setCellValue("TYPEOFACCOUNT");

row1.createCell(4).setCellValue("MODEOFPAYMENT");
row1.createCell(5).setCellValue("WITHDRAWN");
row1.createCell(6).setCellValue("DEPOSITED");
row1.createCell(7).setCellValue("BALANCE");
row1.createCell(8).setCellValue("DATE");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM transactions");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
row2.createCell(5).setCellValue(rs.getString(7));
row2.createCell(6).setCellValue(rs.getString(8));
row2.createCell(7).setCellValue(rs.getString(9));
row2.createCell(8).setCellValue(rs.getString(10));
//row2.createCell(9).setCellValue(rs.getString(10));

}
//workbook.writeProtectWorkbook(Biff8EncryptionKey.getCurrentUserPassword(),"");
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}



public String loans(){
    String succ="Loans Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Loans.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
//autoid, id, loanid, loantype, applicable, installmentamount, installmentsno, periodtype, frequencyperperiod, targetdate, 
//loanAmount, loanRequested, loanbalance, defaultacc, applicationfee, todaypay, nxp, givenOn, paidon
row1.createCell(0).setCellValue("ID");
row1.createCell(1).setCellValue("LOANID");
row1.createCell(2).setCellValue("LOANTYPE");
row1.createCell(3).setCellValue("APPLICABLE");

row1.createCell(4).setCellValue("INSTALLMENTAMOUNT");
row1.createCell(5).setCellValue("INSTALLMENTSNO");
row1.createCell(6).setCellValue("PERIODTYPES");
row1.createCell(7).setCellValue("FREQUENCYPERPERIOD");
row1.createCell(8).setCellValue("TARGETDATE");
row1.createCell(9).setCellValue("LOANAMOUNT");
row1.createCell(10).setCellValue("LOANREQUESTED");
row1.createCell(11).setCellValue("LOANBALANCE");
row1.createCell(12).setCellValue("DEFAULTACC");
row1.createCell(13).setCellValue("APPLICATIONFEE");
row1.createCell(14).setCellValue("TODAYPAY");
row1.createCell(15).setCellValue("NXP");
row1.createCell(16).setCellValue("GIVENON");
row1.createCell(17).setCellValue("PAIDON");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM loans");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
row2.createCell(5).setCellValue(rs.getString(7));
row2.createCell(6).setCellValue(rs.getString(8));
row2.createCell(7).setCellValue(rs.getString(9));
row2.createCell(8).setCellValue(rs.getString(10));
row2.createCell(9).setCellValue(rs.getString(11));
row2.createCell(10).setCellValue(rs.getString(12));
row2.createCell(11).setCellValue(rs.getString(13));
row2.createCell(12).setCellValue(rs.getString(14));
row2.createCell(13).setCellValue(rs.getString(15));
row2.createCell(14).setCellValue(rs.getString(16));
row2.createCell(15).setCellValue(rs.getString(17));
row2.createCell(16).setCellValue(rs.getString(18));
row2.createCell(17).setCellValue(rs.getString(19));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
public String customers(){
    String succ="Customers Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Customers.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//id, accountno, fname, sname, uniq, email, phone, address, county, town, occupation, maritalstatus,
//spaucefname, spaucesname, spauceid, spaucephone, acounttype, group, updated_at, imgurl
row1.createCell(0).setCellValue("ID");
row1.createCell(1).setCellValue("ACCOUNTNO");
row1.createCell(2).setCellValue("FNAME");
row1.createCell(3).setCellValue("SNAME");

row1.createCell(4).setCellValue("UNIQ");
row1.createCell(5).setCellValue("EMAIL");
row1.createCell(6).setCellValue("PHONE");
row1.createCell(7).setCellValue("ADDRESS");
row1.createCell(8).setCellValue("COUNTY");
row1.createCell(9).setCellValue("TOWN");
row1.createCell(10).setCellValue("OCCUPATION");
row1.createCell(11).setCellValue("MARITALSTATUS");
row1.createCell(12).setCellValue("SPAUCEFNAME");
row1.createCell(13).setCellValue("SPAUCESNAME");
row1.createCell(14).setCellValue("SPAUCEID");
row1.createCell(15).setCellValue("SPAUCEPHONE");
row1.createCell(16).setCellValue("ACCOUNTTYPE");
row1.createCell(17).setCellValue("GROUP");
row1.createCell(18).setCellValue("DATE");
row1.createCell(19).setCellValue("IMAGEURL");
//row1.createCell(9).setCellValue("DATE");
//id, accountno, fname, sname, uniq, email, phone, address, county, town, occupation, maritalstatus,
//spaucefname, spaucesname, spauceid, spaucephone, acounttype, group, updated_at, imgurl
//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM users");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(1));
row2.createCell(1).setCellValue(rs.getString(2));
row2.createCell(2).setCellValue(rs.getString(3));
row2.createCell(3).setCellValue(rs.getString(4));
row2.createCell(4).setCellValue(rs.getString(5));
row2.createCell(5).setCellValue(rs.getString(6));
row2.createCell(6).setCellValue(rs.getString(7));
row2.createCell(7).setCellValue(rs.getString(8));
row2.createCell(8).setCellValue(rs.getString(9));
row2.createCell(9).setCellValue(rs.getString(10));
row2.createCell(10).setCellValue(rs.getString(11));
row2.createCell(11).setCellValue(rs.getString(12));
row2.createCell(12).setCellValue(rs.getString(13));
row2.createCell(13).setCellValue(rs.getString(14));
row2.createCell(14).setCellValue(rs.getString(15));
row2.createCell(15).setCellValue(rs.getString(16));
row2.createCell(16).setCellValue(rs.getString(17));
row2.createCell(17).setCellValue(rs.getString(18));
row2.createCell(18).setCellValue(rs.getString(19));
row2.createCell(19).setCellValue(rs.getString(20));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
//autoid, cashin, cashout, description, mode, date


public String orgAccount(){
    String succ="OrgAccount Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\OrganizationsReport.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
row1.createCell(0).setCellValue("cashin");
row1.createCell(1).setCellValue("cashout");
row1.createCell(2).setCellValue("description");
row1.createCell(3).setCellValue("mode");

row1.createCell(4).setCellValue("date");
//row1.createCell(5).setCellValue("WITHDRAWN");
//row1.createCell(6).setCellValue("DEPOSITED");
//row1.createCell(7).setCellValue("BALANCE");
//row1.createCell(8).setCellValue("DATE");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM orgaccount");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
//row2.createCell(5).setCellValue(rs.getString(6));
//row2.createCell(6).setCellValue(rs.getString(7));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}

//autoid, id, name, rate, appfee, penalt, balance, ratePer, rateTime, applicable

public String LoanTypes(){
    String succ="Loanstypes Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\LoanTypes.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("name");
row1.createCell(2).setCellValue("rate");
row1.createCell(3).setCellValue("appfee");

row1.createCell(4).setCellValue("penalt");
row1.createCell(5).setCellValue("balance");
row1.createCell(6).setCellValue("ratePer");
row1.createCell(7).setCellValue("rateTime");
row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM accounttypes");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
row2.createCell(5).setCellValue(rs.getString(7));
row2.createCell(6).setCellValue(rs.getString(8));
row2.createCell(7).setCellValue(rs.getString(9));
row2.createCell(8).setCellValue(rs.getString(10));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
public String guranters(){
    String succ="Guranters Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Guranters.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
//autoid, id, name, phone, gurantee
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("name");
row1.createCell(2).setCellValue("phone");
row1.createCell(3).setCellValue("gurantee");

//row1.createCell(4).setCellValue("penalt");
//row1.createCell(5).setCellValue("balance");
//row1.createCell(6).setCellValue("ratePer");
//row1.createCell(7).setCellValue("rateTime");
//row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM guranters");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
//row2.createCell(4).setCellValue(rs.getString(5));
//row2.createCell(5).setCellValue(rs.getString(6));
//row2.createCell(6).setCellValue(rs.getString(7));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
//autoid, id, accountname, appfee
public String useracctypes(){
    String succ="Useracctypes Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\UserAcctypes.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
//autoid, id, name, phone, gurantee
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("accountname");
row1.createCell(2).setCellValue("appfee");
//row1.createCell(3).setCellValue("gurantee");

//row1.createCell(4).setCellValue("penalt");
//row1.createCell(5).setCellValue("balance");
//row1.createCell(6).setCellValue("ratePer");
//row1.createCell(7).setCellValue("rateTime");
//row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM useracctypes");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
//row2.createCell(3).setCellValue(rs.getString(4));
//row2.createCell(4).setCellValue(rs.getString(5));
//row2.createCell(5).setCellValue(rs.getString(6));
//row2.createCell(6).setCellValue(rs.getString(7));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}

public String usergroups(){
    String succ="UserGroups Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Usergroups.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
//autoid, id, name, phone, gurantee
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("groupname");
//row1.createCell(2).setCellValue("appfee");
//row1.createCell(3).setCellValue("gurantee");

//row1.createCell(4).setCellValue("penalt");
//row1.createCell(5).setCellValue("balance");
//row1.createCell(6).setCellValue("ratePer");
//row1.createCell(7).setCellValue("rateTime");
//row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM usergroups");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
//row2.createCell(2).setCellValue(rs.getString(3));
//row2.createCell(3).setCellValue(rs.getString(4));
//row2.createCell(4).setCellValue(rs.getString(5));
//row2.createCell(5).setCellValue(rs.getString(6));
//row2.createCell(6).setCellValue(rs.getString(7));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
public String Archiveloans(){
    String succ="loansarchives Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Loansarchives.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
//autoid, id, loanid, loantype, applicable, installmentamount, installmentsno, periodtype, frequencyperperiod, targetdate, 
//loanAmount, loanRequested, loanbalance, defaultacc, applicationfee, todaypay, nxp, givenOn, paidon
row1.createCell(0).setCellValue("ID");
row1.createCell(1).setCellValue("LOANID");
row1.createCell(2).setCellValue("LOANTYPE");
row1.createCell(3).setCellValue("APPLICABLE");

row1.createCell(4).setCellValue("INSTALLMENTAMOUNT");
row1.createCell(5).setCellValue("INSTALLMENTSNO");
row1.createCell(6).setCellValue("PERIODTYPES");
row1.createCell(7).setCellValue("FREQUENCYPERPERIOD");
row1.createCell(8).setCellValue("TARGETDATE");
row1.createCell(9).setCellValue("LOANAMOUNT");
row1.createCell(10).setCellValue("LOANREQUESTED");
row1.createCell(11).setCellValue("LOANBALANCE");
row1.createCell(12).setCellValue("DEFAULTACC");
row1.createCell(13).setCellValue("APPLICATIONFEE");
row1.createCell(14).setCellValue("TODAYPAY");
row1.createCell(15).setCellValue("NXP");
row1.createCell(16).setCellValue("GIVENON");
row1.createCell(17).setCellValue("PAIDON");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM loansarchives");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
row2.createCell(5).setCellValue(rs.getString(7));
row2.createCell(6).setCellValue(rs.getString(8));
row2.createCell(7).setCellValue(rs.getString(9));
row2.createCell(8).setCellValue(rs.getString(10));
row2.createCell(9).setCellValue(rs.getString(11));
row2.createCell(10).setCellValue(rs.getString(12));
row2.createCell(11).setCellValue(rs.getString(13));
row2.createCell(12).setCellValue(rs.getString(14));
row2.createCell(13).setCellValue(rs.getString(15));
row2.createCell(14).setCellValue(rs.getString(16));
row2.createCell(15).setCellValue(rs.getString(17));
row2.createCell(16).setCellValue(rs.getString(18));
row2.createCell(17).setCellValue(rs.getString(19));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}
//id, name, address, email, website, phone, imgurl
public String Prefrences(){
    String succ="Prefrences Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Prefrences.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("name");
row1.createCell(2).setCellValue("address");
row1.createCell(3).setCellValue("email");

row1.createCell(4).setCellValue("website");
row1.createCell(5).setCellValue("phone");
row1.createCell(6).setCellValue("omgurl");
//row1.createCell(7).setCellValue("rateTime");
//row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");

//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM prefrences");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(1));
row2.createCell(1).setCellValue(rs.getString(2));
row2.createCell(2).setCellValue(rs.getString(3));
row2.createCell(3).setCellValue(rs.getString(4));
row2.createCell(4).setCellValue(rs.getString(5));
row2.createCell(5).setCellValue(rs.getString(6));
row2.createCell(6).setCellValue(rs.getString(7));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
}catch(IOException ioe){
System.out.println(ioe);
}
            return succ;
}

public String Applications(){
    String succ="Aplications Backup Error";
            try{
Methods m=new Methods();
        Connection con = m.getConnection();
Statement statement = con.createStatement();
FileOutputStream fileOut;
fileOut = new FileOutputStream(""+chooser.getSelectedFile()+"\\Applications.xls");
HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet worksheet = workbook.createSheet("Sheet 0");
Row row1 = worksheet.createRow((short)0);
//row1.createCell(0).setCellValue("AUTOID");
row1.createCell(0).setCellValue("id");
row1.createCell(1).setCellValue("type");
row1.createCell(2).setCellValue("amount");
row1.createCell(3).setCellValue("status");

row1.createCell(4).setCellValue("guranters");
row1.createCell(5).setCellValue("name");
row1.createCell(6).setCellValue("updated_at");
//row1.createCell(7).setCellValue("rateTime");
//row1.createCell(8).setCellValue("applicable");
//row1.createCell(9).setCellValue("DATE");
//autoid, id, type, amount, status, guranters, name, updated_at
//row1.createCell(10).setCellValue("DATE");
Row row2 ;
ResultSet rs = statement.executeQuery("SELECT * FROM applications");
while(rs.next()){
int a = rs.getRow();
row2 = worksheet.createRow((short)a);
row2.createCell(0).setCellValue(rs.getString(2));
row2.createCell(1).setCellValue(rs.getString(3));
row2.createCell(2).setCellValue(rs.getString(4));
row2.createCell(3).setCellValue(rs.getString(5));
row2.createCell(4).setCellValue(rs.getString(6));
row2.createCell(5).setCellValue(rs.getString(7));
row2.createCell(6).setCellValue(rs.getString(8));
//row2.createCell(7).setCellValue(rs.getString(8));
//row2.createCell(8).setCellValue(rs.getString(9));
//row2.createCell(9).setCellValue(rs.getString(10));

}
workbook.write(fileOut);
fileOut.flush();
fileOut.close();
rs.close();statement.close();

con.close();
succ="Succesful";
System.out.println("Export Success");
//status.setText("\n   Export Successfull    ");
}catch(SQLException ex){
System.out.println(ex);
ex.printStackTrace();
}catch(IOException ioe){
    ioe.printStackTrace();
   
System.out.println(ioe);
}
            return succ;
}




//id, name, address, email, website, phone, imgurl
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new backup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxApplications;
    private javax.swing.JCheckBox jCheckBoxCustomers;
    private javax.swing.JCheckBox jCheckBoxGuranters;
    private javax.swing.JCheckBox jCheckBoxLoanTypes;
    private javax.swing.JCheckBox jCheckBoxLoans;
    private javax.swing.JCheckBox jCheckBoxLoansArchives;
    private javax.swing.JCheckBox jCheckBoxOrgAccount;
    private javax.swing.JCheckBox jCheckBoxPrefrences;
    private javax.swing.JCheckBox jCheckBoxTransactions;
    private javax.swing.JCheckBox jCheckBoxuseracctypes;
    private javax.swing.JCheckBox jCheckBoxusergroups;
    private javax.swing.JComboBox<String> jComboBoxChoose;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private String getDbUserName() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    String DbUserName="root";
    
    return DbUserName;
    }

    private String getDbPassword() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     String DbPassword="123ERYcog.";
     return DbPassword;
    }

    private String getDbConnectionIP() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    String DpIp="localhost";
    return DpIp;
    }

    private String getDbConnectionPort() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    String DbPort="3306";
    return DbPort;
    }

    private String getDbName() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    String DbName="inua";
    return DbName;
    
    }
}
